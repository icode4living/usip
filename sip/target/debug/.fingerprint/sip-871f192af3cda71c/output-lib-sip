{"message":"unused imports: `AsChar`, `Err as NomErr`, `ErrorKind`, `InputTakeAtPosition`, `alpha1`, `alphanumeric1`, `combinator::opt`, `count`, `many0`, `many1`, `many_m_n`, `one_of`, `preceded`, `tag_no_case`, `take`, `terminated`, `tuple`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/header/request.rs","byte_start":55,"byte_end":66,"line_start":3,"line_end":3,"column_start":28,"column_end":39,"is_primary":true,"text":[{"text":"    bytes::complete::{tag, tag_no_case, take,},","highlight_start":28,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":68,"byte_end":72,"line_start":3,"line_end":3,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"    bytes::complete::{tag, tag_no_case, take,},","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":102,"byte_end":108,"line_start":4,"line_end":4,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    character::complete::{alpha1, alphanumeric1, one_of,char},","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":110,"byte_end":123,"line_start":4,"line_end":4,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"    character::complete::{alpha1, alphanumeric1, one_of,char},","highlight_start":35,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":125,"byte_end":131,"line_start":4,"line_end":4,"column_start":50,"column_end":56,"is_primary":true,"text":[{"text":"    character::complete::{alpha1, alphanumeric1, one_of,char},","highlight_start":50,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":175,"byte_end":190,"line_start":6,"line_end":6,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    combinator::opt,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":213,"byte_end":222,"line_start":7,"line_end":7,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"    error::{context, ErrorKind, VerboseError},","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":251,"byte_end":256,"line_start":8,"line_end":8,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    multi::{count, many0, many1, many_m_n},","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":258,"byte_end":263,"line_start":8,"line_end":8,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"    multi::{count, many0, many1, many_m_n},","highlight_start":20,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":265,"byte_end":270,"line_start":8,"line_end":8,"column_start":27,"column_end":32,"is_primary":true,"text":[{"text":"    multi::{count, many0, many1, many_m_n},","highlight_start":27,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":272,"byte_end":280,"line_start":8,"line_end":8,"column_start":34,"column_end":42,"is_primary":true,"text":[{"text":"    multi::{count, many0, many1, many_m_n},","highlight_start":34,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":298,"byte_end":306,"line_start":9,"line_end":9,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":324,"byte_end":334,"line_start":9,"line_end":9,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":336,"byte_end":341,"line_start":9,"line_end":9,"column_start":54,"column_end":59,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":54,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":348,"byte_end":354,"line_start":10,"line_end":10,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    AsChar, Err as NomErr, IResult, InputTakeAtPosition,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":356,"byte_end":369,"line_start":10,"line_end":10,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    AsChar, Err as NomErr, IResult, InputTakeAtPosition,","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":380,"byte_end":399,"line_start":10,"line_end":10,"column_start":37,"column_end":56,"is_primary":true,"text":[{"text":"    AsChar, Err as NomErr, IResult, InputTakeAtPosition,","highlight_start":37,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/header/request.rs","byte_start":53,"byte_end":72,"line_start":3,"line_end":3,"column_start":26,"column_end":45,"is_primary":true,"text":[{"text":"    bytes::complete::{tag, tag_no_case, take,},","highlight_start":26,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":102,"byte_end":132,"line_start":4,"line_end":4,"column_start":27,"column_end":57,"is_primary":true,"text":[{"text":"    character::complete::{alpha1, alphanumeric1, one_of,char},","highlight_start":27,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":169,"byte_end":190,"line_start":5,"line_end":6,"column_start":31,"column_end":20,"is_primary":true,"text":[{"text":"    number::complete::{double},","highlight_start":31,"highlight_end":32},{"text":"    combinator::opt,","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":211,"byte_end":222,"line_start":7,"line_end":7,"column_start":20,"column_end":31,"is_primary":true,"text":[{"text":"    error::{context, ErrorKind, VerboseError},","highlight_start":20,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":237,"byte_end":281,"line_start":7,"line_end":8,"column_start":46,"column_end":43,"is_primary":true,"text":[{"text":"    error::{context, ErrorKind, VerboseError},","highlight_start":46,"highlight_end":47},{"text":"    multi::{count, many0, many1, many_m_n},","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":298,"byte_end":308,"line_start":9,"line_end":9,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":322,"byte_end":341,"line_start":9,"line_end":9,"column_start":40,"column_end":59,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":40,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":342,"byte_end":369,"line_start":9,"line_end":10,"column_start":60,"column_end":26,"is_primary":true,"text":[{"text":"    sequence::{preceded, separated_pair, terminated, tuple},","highlight_start":60,"highlight_end":61},{"text":"    AsChar, Err as NomErr, IResult, InputTakeAtPosition,","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/header/request.rs","byte_start":378,"byte_end":399,"line_start":10,"line_end":10,"column_start":35,"column_end":56,"is_primary":true,"text":[{"text":"    AsChar, Err as NomErr, IResult, InputTakeAtPosition,","highlight_start":35,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AsChar`, `Err as NomErr`, `ErrorKind`, `InputTakeAtPosition`, `alpha1`, `alphanumeric1`, `combinator::opt`, `count`, `many0`, `many1`, `many_m_n`, `one_of`, `preceded`, `tag_no_case`, `take`, `terminated`, `tuple`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:3:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    bytes::complete::{tag, tag_no_case, take,},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    character::complete::{alpha1, alphanumeric1, one_of,char},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    number::complete::{double},\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    combinator::opt,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    error::{context, ErrorKind, VerboseError},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    multi::{count, many0, many1, many_m_n},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    sequence::{preceded, separated_pair, terminated, tuple},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    AsChar, Err as NomErr, IResult, InputTakeAtPosition,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputLength` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1728,"byte_end":1734,"line_start":54,"line_end":54,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":49,"highlight_end":55}],"label":"the trait `InputLength` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":false,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `InputLength`:\n  &'a [T]\n  &'a [u8; 0]\n  &'a [u8; 10]\n  &'a [u8; 11]\n  &'a [u8; 12]\n  &'a [u8; 13]\n  &'a [u8; 14]\n  &'a [u8; 15]\nand 61 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":6,"column_end":17,"is_primary":true,"text":[{"text":"  T: InputLength + Clone,","highlight_start":6,"highlight_end":17}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputLength` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `InputLength` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `InputLength`:\u001b[0m\n\u001b[0m             &'a [T]\u001b[0m\n\u001b[0m             &'a [u8; 0]\u001b[0m\n\u001b[0m             &'a [u8; 10]\u001b[0m\n\u001b[0m             &'a [u8; 11]\u001b[0m\n\u001b[0m             &'a [u8; 12]\u001b[0m\n\u001b[0m             &'a [u8; 13]\u001b[0m\n\u001b[0m             &'a [u8; 14]\u001b[0m\n\u001b[0m             &'a [u8; 15]\u001b[0m\n\u001b[0m           and 61 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:37:6\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  T: InputLength + Clone,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"type mismatch resolving `<&str as InputIter>::Item == u8`","code":{"code":"E0271","explanation":"A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"expected `u8`, found `char`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1258,"byte_end":1268,"line_start":36,"line_end":36,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"  Input: InputTake + Compare<T>,","highlight_start":22,"highlight_end":32}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0271]\u001b[0m\u001b[0m\u001b[1m: type mismatch resolving `<&str as InputIter>::Item == u8`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `u8`, found `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:36:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  Input: InputTake + Compare<T>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"the trait bound `&str: UnspecializedInput` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"the trait `UnspecializedInput` is not implemented for `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Compare<T>`:\n  <&'a str as Compare<&'b [u8]>>\n  <&'a str as Compare<&'b str>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1258,"byte_end":1268,"line_start":36,"line_end":36,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"  Input: InputTake + Compare<T>,","highlight_start":22,"highlight_end":32}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `&str: UnspecializedInput` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `UnspecializedInput` is not implemented for `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Compare<T>`:\u001b[0m\n\u001b[0m             <&'a str as Compare<&'b [u8]>>\u001b[0m\n\u001b[0m             <&'a str as Compare<&'b str>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:36:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  Input: InputTake + Compare<T>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputLength` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"the trait `InputLength` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `InputLength`:\n  &'a [T]\n  &'a [u8; 0]\n  &'a [u8; 10]\n  &'a [u8; 11]\n  &'a [u8; 12]\n  &'a [u8; 13]\n  &'a [u8; 14]\n  &'a [u8; 15]\nand 61 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1258,"byte_end":1268,"line_start":36,"line_end":36,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"  Input: InputTake + Compare<T>,","highlight_start":22,"highlight_end":32}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputLength` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `InputLength` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `InputLength`:\u001b[0m\n\u001b[0m             &'a [T]\u001b[0m\n\u001b[0m             &'a [u8; 0]\u001b[0m\n\u001b[0m             &'a [u8; 10]\u001b[0m\n\u001b[0m             &'a [u8; 11]\u001b[0m\n\u001b[0m             &'a [u8; 12]\u001b[0m\n\u001b[0m             &'a [u8; 13]\u001b[0m\n\u001b[0m             &'a [u8; 14]\u001b[0m\n\u001b[0m             &'a [u8; 15]\u001b[0m\n\u001b[0m           and 61 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:36:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  Input: InputTake + Compare<T>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputIter` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"the trait `InputIter` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `InputIter`:\n  &'a [u8; 0]\n  &'a [u8; 10]\n  &'a [u8; 11]\n  &'a [u8; 12]\n  &'a [u8; 13]\n  &'a [u8; 14]\n  &'a [u8; 15]\n  &'a [u8; 16]\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1258,"byte_end":1268,"line_start":36,"line_end":36,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"  Input: InputTake + Compare<T>,","highlight_start":22,"highlight_end":32}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputIter` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `InputIter` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `InputIter`:\u001b[0m\n\u001b[0m             &'a [u8; 0]\u001b[0m\n\u001b[0m             &'a [u8; 10]\u001b[0m\n\u001b[0m             &'a [u8; 11]\u001b[0m\n\u001b[0m             &'a [u8; 12]\u001b[0m\n\u001b[0m             &'a [u8; 13]\u001b[0m\n\u001b[0m             &'a [u8; 14]\u001b[0m\n\u001b[0m             &'a [u8; 15]\u001b[0m\n\u001b[0m             &'a [u8; 16]\u001b[0m\n\u001b[0m           and 27 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:36:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  Input: InputTake + Compare<T>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputTake` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1724,"byte_end":1727,"line_start":54,"line_end":54,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":45,"highlight_end":48}],"label":"the trait `InputTake` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `InputTake`:\n  &'a [u8]\n  &'a str","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `nom::bytes::complete::tag`","code":null,"level":"note","spans":[{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1128,"byte_end":1131,"line_start":32,"line_end":32,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"pub fn tag<T, Input, Error: ParseError<Input>>(","highlight_start":8,"highlight_end":11}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1258,"byte_end":1268,"line_start":36,"line_end":36,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"  Input: InputTake + Compare<T>,","highlight_start":22,"highlight_end":32}],"label":"required by this bound in `tag`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}: InputTake` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:54:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `InputTake` is not implemented for fn item `fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `InputTake`:\u001b[0m\n\u001b[0m             &'a [u8]\u001b[0m\n\u001b[0m             &'a str\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&str` to implement `Compare<fn(_) -> Result<(_, f64), nom::Err<_>> {nom::number::complete::double::<_, _>}>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `nom::bytes::complete::tag`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucv/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:36:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tag<T, Input, Error: ParseError<Input>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  Input: InputTake + Compare<T>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tag`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/header/request.rs","byte_start":1648,"byte_end":1749,"line_start":52,"line_end":55,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    context(","highlight_start":5,"highlight_end":13},{"text":"        \"SIP-Version\",","highlight_start":1,"highlight_end":23},{"text":"        separated_pair(tag(\"SIP\"),char('/'),tag(double))","highlight_start":1,"highlight_end":57},{"text":"    )(input)","highlight_start":1,"highlight_end":13}],"label":"expected `Result<(&str, (&str, ...)), ...>`, found `Result<(&str, (&str, &str)), ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/header/request.rs","byte_start":1612,"byte_end":1642,"line_start":51,"line_end":51,"column_start":33,"column_end":63,"is_primary":false,"text":[{"text":"pub fn sip_version(input:&str)->Res<&str, (&str,Option<&str>)>{","highlight_start":33,"highlight_end":63}],"label":"expected `Result<(&str, (&str, Option<&str>)), nom::Err<VerboseError<&str>>>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<(&str, (&str, Option<&str>)), nom::Err<VerboseError<&str>>>`\n   found enum `Result<(&str, (&str, &str)), nom::Err<_>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`","code":null,"level":"help","spans":[{"file_name":"src/header/request.rs","byte_start":1648,"byte_end":1648,"line_start":52,"line_end":52,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    context(","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"Ok(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/header/request.rs","byte_start":1749,"byte_end":1749,"line_start":55,"line_end":55,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"    )(input)","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"?)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/header/request.rs:52:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub fn sip_version(input:&str)->Res<&str, (&str,Option<&str>)>{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(&str, (&str, Option<&str>)), nom::Err<VerboseError<&str>>>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    context(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \"SIP-Version\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    )(input)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<(&str, (&str, ...)), ...>`, found `Result<(&str, (&str, &str)), ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, (\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, \u001b[0m\u001b[0m\u001b[1mOption<&str>\u001b[0m\u001b[0m)), nom::Err<\u001b[0m\u001b[0m\u001b[1mVerboseError<&str>\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m              found enum `Result<(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, (\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, \u001b[0m\u001b[0m\u001b[1m&str\u001b[0m\u001b[0m)), nom::Err<\u001b[0m\u001b[0m\u001b[1m_\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `?` to coerce and return an appropriate `Err`, and wrap the resulting value in `Ok` so the expression remains of type `Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mOk(\u001b[0m\u001b[0mcontext(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \"SIP-Version\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        separated_pair(tag(\"SIP\"),char('/'),tag(double))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    )(input)\u001b[0m\u001b[0m\u001b[38;5;10m?)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0271, E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0271, E0277, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0271`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0271`.\u001b[0m\n"}
